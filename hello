import numpy as np
import model1  # Assuming you have an SVM model module
from flask import Flask, request, render_template
import pickle
import re
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer

app = Flask(__name__, template_folder="templates")
model = pickle.load(open('model1.pkl', 'rb'))

# Sample function to extract additional features from the tweet
def extract_text_features(tweet):
    # Counting the number of hashtags
    hashtag_count = len(re.findall(r'#\w+', tweet))
    
    # Counting punctuation
    punctuation_count = len(re.findall(r'[!.,;?]', tweet))

    # Counting characters
    char_count = len(tweet)

    # Counting words
    word_count = len(re.findall(r'\b\w+\b', tweet))

    # Counting mentions
    mention_count = len(re.findall(r'@\w+', tweet))

    # Counting acronyms (assuming they are in all caps)
    acronym_count = len(re.findall(r'\b[A-Z]+\b', tweet))

    return hashtag_count, punctuation_count, char_count, word_count, mention_count, acronym_count

# Sample function to preprocess the tweet
def preprocess_tweet(tweet):
    # Removing stopwords and converting to lowercase
    stop_words = set(stopwords.words('english'))
    tweet = re.sub(r'\W', ' ', tweet)
    tweet = ' '.join([word.lower() for word in tweet.split() if word.lower() not in stop_words])
    return tweet

@app.route('/')
def home():
    return render_template('SVM.html')

@app.route('/predict', methods=['GET'])
def predict():
    tweet = request.args.get('TWEET')

    # Extract additional text features
    hashtag_count, punctuation_count, char_count, word_count, mention_count, acronym_count = extract_text_features(tweet)

    # Preprocess the tweet
    preprocessed_tweet = preprocess_tweet(tweet)

    # Convert numeric features to numpy array
    numeric_features = np.array([hashtag_count, punctuation_count, char_count, word_count, mention_count, acronym_count]).reshape(1, -1)

    # Make prediction using the SVM model
    output = model.predict(numeric_features)

    if output == 1:
        out = 'You have high chances of getting placed!!!'
    else:
         out = 'You have low chances of getting placed. All the best.'

    return render_template('out.html', output=out)

if __name__ == "__main__":
    app.run(debug=True)
